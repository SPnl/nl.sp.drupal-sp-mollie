<?php

/*
 * Module adds Mollie donation export to CiviCRM.
 */


/**
 * Implements hook_menu().
 */
function sp_mollie_export_menu() {

  $items['admin/config/sp_mollie/export'] = array(
    'title' => 'Export settings',
    'description' => 'Instellingen voor het exporteren van donateursinformatie naar CiviCRM.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sp_mollie_export_settings_form'),
    'file' => 'sp_mollie_export_settings.form.inc',
    'access callback' => 'user_access',
    'access arguments' => array('administer access control'),
  );

  $items['donatie/group/autocomplete'] = array(
    'page callback' => 'sp_mollie_export_group_autocomplete',
    'access callback' => 'sprbs_access_check',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function sp_mollie_export_cron() {
  preg_match('/^(.+)\(([0-9]+)\)$/', variable_get('sp_mollie_export_group', ''), $matches);
  if (!empty($matches[1]) && !empty($matches[2])) {
    $group_id = $matches[2];
    // Export pending donations.
    $max_updates = 2;
    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'sp_mollie_donation')
      ->propertyCondition('status', 'paid')
      ->range(0, $max_updates)
      ->execute();

    if (isset($result['sp_mollie_donation'])) {
      $donation_ids = array_keys($result['sp_mollie_donation']);
      $donations = entity_load('sp_mollie_donation', $donation_ids);
    } 
    foreach ($donations as $donation) {
      $data = array(
        'name' => $donation->name,
        'email' => $donation->email,
        'telephone' => $donation->phone,
      );
      // Export group.
      $groups = array(
        $group_id,
      );
      $site_name = variable_get('site_name');
      $source = 'SP donation export:  did: ' . $donation->did .' (' . $site_name . ')';
      $result = spcivipush_push_contact($data, $groups, 'Pushing donation contact.', $source);
      if ($result === FALSE) {
        $status = 'export_error';
      }
      elseif ($result === 'insufficient data') {
        $status = 'export_insufficient_data';
      }
      else {
        $status = 'export_success';
      }
      $donation->status = $status;
      $donation->save();

      sleep(1);
    }
  }
}

function sp_mollie_export_group_autocomplete($string) {
  $string = strtolower($string);
  $matches = array();
  if (strlen($string) > 2) {
    $matches = array();
    $groups = sp_mollie_export_get_civi_groups();

    foreach ($groups as $key => $group) {
      if (strpos(strtolower($group), $string) !== FALSE) {
        $matches[$group . ' (' . $key . ')'] = $group;
      }
      if (count($matches) > 10) break;
    }
  }

  //Return the result to the form in json
  drupal_json_output($matches);
}

function sp_mollie_export_get_civi_groups($sync = TRUE) {
  if ($sync) {
    $groups = &drupal_static(__FUNCTION__);
    if (!isset($groups)) {

      if ($cache = cache_get('sp_mollie_export_civi_groups')) {
        $groups = $cache->data;
      }
      else {
        $groups = array();
        set_time_limit(0);
        $spcivi = \SPCivi::getInstance();
        $params = array(
          'sequential'            => 1,
          'option.limit'          => 9999,
        );
        $groups_results = $spcivi->api('Group', 'get', $params);
        if (!isset($groups_results['is_error']) || $groups_results['is_error'] == 1) {
          drupal_set_message('Fout bij het ophalen van groepen.', 'error');
          watchdog('spcivisync', '<p>Fout bij het ophalen van groepen.<pre>' . print_r($groups_results, TRUE) . '</pre>Parameters:<pre>' . print_r($params, TRUE) . '</pre>', array(), WATCHDOG_ERROR);
        }
        else {
          if (!empty($groups_results['values'])) {
            foreach ($groups_results['values'] as $value) {
              if (
                empty($value['group_type']) ||
                (array_key_exists(0, $value['group_type']) && empty($value['group_type'][0])) ||
                in_array('2', $value['group_type'])
              ) {
              $groups[$value['id']] = $value['title'];
              }
            }
            asort($groups);
            variable_set('sp_mollie_export_civi_groups', $groups);
          }
          else {
            drupal_set_message('Error syncing civicrm groups, using saved data.', 'warning');
          }
        }
      }
      $groups = variable_get('sp_mollie_export_civi_groups', array());
      cache_set('sp_mollie_export_civi_groups', $groups, 'cache', time() + 3600);
    }
    return $groups;
  }
  $groups = variable_get('sp_mollie_export_civi_groups', array());
  return $groups;
}
